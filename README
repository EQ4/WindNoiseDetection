This program automatically analyses .wav files and detects regions where there may be microphone wind noise.  Wind noise is known to degrade the quality of recordings.  

This tool could be used when there are a large number of recordings of a particular source, for example clips of recording from mobile devices of an outdoor concert.  This tool can quickly analyse the audio from every recording to determine clips with the least amount of wind noise and therefore of the highest quality.

The wind noise detection algorithm also provides information regarding the regions which are free of wind noise.  This can allow producers o9f content to quickly stitch together content from multiple sources, or flag regions where extra processing such as noise reduction is required.



It is licensed under the MIT license and uses the KISS_fft 
library (sourceforge.net/projects.kissfft/) which is licensed under the revised BSD license. You are therefore free to use this in pretty much any project.  If you do use this work in any project an acknowledgement would be appreciated, please reference this Link: 
http://www.salford.ac.uk/computing-science-engineering/subjects/acoustics-audio-and-video
The software was developed at the University of Salford and uses a bagged decision tree to analyse MFCCs to discover if an audio frame contains microphone wind noise, it is part of the Good Recording Project at the University of Salford Acoustic Research Centre. 

Usage:

windnoisedetection -i wav_filename -o output_filename [-t 1] [-g 1] [-f 43]
     -i and -o are required parameters, they provide the input .wav filename and the output filename respectively.
     -t n, sets the tree size to n, where n is an integer (1,2 or 3). The default is 2, 1 is fastest and least accurate.
     -g 1, sets the gain to apply. The default is 1.  If you have calibrated audio you can adjust the level, by default the peak pressure level is assumed to 104 dB
     -f n, set the size of the analysis window, windows are 1024 samples.  The default is 43, which is about 1 s



The output is a text file which begins with the wav file header information and follows with the analysis;

Time (s) | dBA | Average Wind Level | Ave SNR | Combined result

The Average Wind Level class varies from 0 to 3,

0 :  < 30 dBA
1 : 30 to 50 dBA
2 : 50 to 70 dBA
3 : > 70 dBA

The average SNR class varies from 0 to 5,

0 : < -20 dB   (lots of wind noise!)
1 : -20 to 10dB
2 : -10 to 0dB
3 : 0 to 10 dB
4 : 10 to 20 dB
5 : >  20dB  (very  little wind noise

The combined result represents the audio quality.  It is the average SNR class when the Average Wind Level > 1  normalised so that 0 is the worst SNR and 1 the best.  In other words if there is no wind noise indicated by the wind level, the snr is forced to 0.  High values should indicate the presence of wind noise.

Wav files must be 16/ 32 bit in, or 32 bit float PCM
All channels are collapsed to one (average of all channels)

Usage:

First compile the program,

then run using the following parameter syntax


<executable> "-i" "iphone1.wav" "-o" "iphone1.txt" "-t" "1" "-g" "1" "-f" "43

-i - input file name path
-o output filename path
-t tree size to use (1,2,3) 1 is a small tree, 3 is a big tree.
-g Gain to apply, currently all wav files are normalise so that +-1 peak to peak represents a level recorded at 104 dB
-f Analysis window (frames) 43 is roughly 1 s, windows are 1024 samples

only the input and output parameters are required


<executable> "-i" "iphone1.wav" "-o" "iphone1.txt"